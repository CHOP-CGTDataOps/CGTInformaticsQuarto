---
title: REDCapTidieR 0.3.0
image: images/REDCapTidieR.png
author: Stephan Kadauke, Ezra Porter, Richard Hanna
date: "2023-02-28"
description: "REDCapTidieR v0.3.0 release announcement and change descriptions."
categories:
  - REDCap
  - REDCapTidieR
  - R
---

We're thrilled to announce the release of [REDCapTidieR](https://chop-cgtinformatics.github.io/REDCapTidieR/) v0.3.0 on CRAN! REDCapTidieR provides a user-friendly way to [import](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#import) data from a [REDCap](https://www.project-redcap.org/) [project](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#project) into the R environment.

You can install the current version from CRAN with:

```{r, eval = FALSE}
install.packages("REDCapTidieR")
```

## Repeating events support ðŸŽ‰

### What this means in REDCap

One of the biggest updates to REDCapTidieR is support for REDCap "repeating events." For the uninitiated, REDCap allows for two types of repeating elements: [**instruments**](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#instrument) and [**events**](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#event). Note that each of these is only available to [longitudinal](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#longitudinal-project) [databases](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#database). When designing a REDCap [database](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#database), developers have the option to specify whether an event repeats all instruments together or repeats instruments independently of each other. From REDCap, this looks like:

![](images/repeating_events_instruments.png){fig-alt="REDCap Repeating Instruments Events"}

And for a given record that has both [repeating **instruments**](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-instrument) and [repeating **events**](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event), this takes the visual form:

![](images/redcap_repeat_events_ui.png){fig-alt="REDCap Repeating Events UI" fig-align="center" width="447"}

Where the [repeating *instrument*](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-instrument) is shown in the [red box]{style="color: red;"} and the [repeating *event*](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event) is shown in the [green box]{style="color: green;"}.

From the API, [repeating events](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event) aren't captured much differently from [repeating instruments](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-instrument). In fact, no new column names are added to the data export. The same default columns of `redcap_repeat_instrument` and `redcap_repeat_instance` are used to indicate a [repeating instrument](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-instrument) when *both* are filled with data. It is the *lack* of data in `redcap_repeat_instrument` while data remains in `redcap_repeat_instance` which indicates a [repeating event](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event). In the image below, a sample REDCap export is shown where the [repeating instrument](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-instrument) data is shown in the [red box]{style="color: red;"} and the [repeating event](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event) data is shown in the [green box]{style="color: green;"}:

![](images/repeating_events_instrument_export.png){fig-alt="REDCap Repeating Event Export" fig-align="center" width="518"}

> It is important to note that [repeating instruments](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-instrument) **cannot** be included in [repeating events](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event), and REDCapTidieR will throw an error if this is forced and detected!

### What this means in REDCapTidieR

For REDCapTidieR 0.3.0, we decided it is better to be explicit about what our [columns](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#data-column) mean. For this reason, `redcap_repeat_instance` has been split into `redcap_form_instance` and `redcap_event_instance` for applicable [databases](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#database). This is a **breaking change** in the output of the package.

For the above sample database, the high-level `REDCapTidieR::read_readcap()` [supertibble](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#supertibble) [structure](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#structure) stays the same:

::: {.column-body-outset}
![](images/repeat_event_db.png){fig-align="center" width="1000"}
:::

However, for the repeating instrument associated with the `r_instrument` form name, the new `redcap_form_instance` variable can be seen in the [red box]{style="color: red;"}:

![](images/redcap_form_instance.png){fig-align="center" width="800"}

And the new `redcap_event_instance` variable associated with the `nr_instrument` form name can be seen in the [green box]{style="color: green;"}:

![](images/redcap_event_instance.png){fig-align="center" width="800"}

### What this means for you

For developers/maintainers of longitudinal REDCap's with no repeating events [repeating events](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event), the only change to keep track of is the switch from `redcap_repeat_instance` to `redcap_form_instance`.

The additional capabilities provided by [repeating events](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#repeating-event) support brought us back to the drawing board for how we wanted to best tackle REDCap [data tibbles](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#data-tibble). A cornerstone decision for REDCapTidieR's design is to remove any sparsity from a REDCap output, as given by the default [block matrix](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#block-matrix). By introducing `redcap_event_instance`, we are actively choosing to reintroduce the potential for `NA`/missing data. This rationale is based on the need to have [data tibble](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#data-tibble) [columns](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#data-column) preserved with singular meaning. Any one [column](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#data-column) should not be dependent on another for identification of [structure](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#structure). The [block matrix](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#block-matrix) and associated use of `redcap_repeat_instrument` and `redcap_repeat_instance` is not in line with the reduction in ambiguity that REDCapTidieR seeks to provide developers.

This means that for longitudinal REDCap [databases](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#database), any use of `redcap_repeat_instance` needs to be updated to use the appropriate `redcap_form_instance`/`redcap_event_instance` variables.

The associated [granularity](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#granularity) for the updated [identifier columns](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#identifier-column) is illustrated in greater detail in the [REDCapTidieR Diving Deeper vignette](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/diving_deeper.html#longitudinal-redcap-projects) as well as depicted here:

::: {.column-body-outset}
+--------------------------+---------------------+------------------------+----------------------------+-----------------------------+
| **Instrument Structure** | **Event Structure** | **Classic**            | **Longitudinal, one arm**  | **Longitudinal, multi-arm** |
+:========================:+:===================:+:======================:+:==========================:+:===========================:+
| **Nonrepeating**         | **Nonrepeating**    | `record_id`            | `record_id` +\             | `record_id` +\              |
|                          |                     |                        | `redcap_event`             | `redcap_event` +\           |
|                          |                     |                        |                            | `redcap_arm`                |
+--------------------------+---------------------+------------------------+----------------------------+-----------------------------+
| **Repeating**            | **Nonrepeating**    | `record_id` +\         | `record_id` +\             | `record_id` +\              |
|                          |                     | `redcap_form_instance` | `redcap_form_instance` +\  | `redcap_form_instance` +\   |
|                          |                     |                        | `redcap_event`             | `redcap_event` +\           |
|                          |                     |                        |                            | `redcap_arm`                |
+--------------------------+---------------------+------------------------+----------------------------+-----------------------------+
| **Nonrepeating**         | **Repeating**       | N/A                    | `record_id` +\             | `record_id` +\              |
|                          |                     |                        | `redcap_event_instance` +\ | `redcap_event_instance` +\  |
|                          |                     |                        | `redcap_event`             | `redcap_event` +\           |
|                          |                     |                        |                            | `redcap_arm`                |
+--------------------------+---------------------+------------------------+----------------------------+-----------------------------+
| **Repeating**            | **Repeating**       | Not Supported          | Not Supported              | Not Supported               |
+--------------------------+---------------------+------------------------+----------------------------+-----------------------------+
:::

## Performance improvements and enhancements

-   Improved error message suite:
    -   Helpful error message provided for various conditions related to REDCap API calls
    -   Helpful error messages added for checks across all exported functions
    -   Unexpected error messages provided with direction to submitting bug reports
    -   Improved error messages for label parsing
-   The default `select_choices_and_calculations` exported by the REDCap API for [metadata](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#metadata-tibble) purposes has been reintegrated. It was dropped in v0.2.0.

## Bug Fixes

-   Fixed a bug where the `suppress_redcapr_messages` argument for `read_redcap` was not working appropriately
-   Fixed a bug where REDCap checkbox labels without white space would be incorrectly parsed
-   Added a warning when REDCapTidieR detects a multiple choice field that has duplicated labels
- Fixed a bug where empty rows would appear in data tibbles in longitudinal REDCap exports for events containing a mix of empty and filled forms
- Fixed a bug where the `forms` specification in `read_redcap()` may lead to incorrect removal of data for databases with repeating events
