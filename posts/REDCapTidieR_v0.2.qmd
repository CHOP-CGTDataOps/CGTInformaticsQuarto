---
title: REDCapTidieR 0.2.0 ü¶É
image: images/REDCapTidieR.png
author: Stephan Kadauke, Ezra Porter, Richard Hanna
---

We're thrilled to announce the release of [REDCapTidieR](https://chop-cgtdataops.github.io/REDCapTidieR/) v0.2.0 on CRAN! REDCapTidieR provides an user-friendly way to import data from a [REDCap](https://www.project-redcap.org/) database into an R environment. You can install the current version from CRAN using `install.packages("REDCapTidieR")`.

The workhorse of REDCapTidieR is the `read_redcap_tidy()` function which builds upon [REDCapR](https://ouhscbbmc.github.io/REDCapR/). `read_redcap_tidy` returns a special object, the **supertibble**, which contains data and metadata in neatly organized [tidy](https://vita.had.co.nz/papers/tidy-data.pdf) tibbles.

## Hello metadata!

A key change to REDCapTidieR in v0.2.0 is that the supertibble now includes a lot of additional instrument-level metadata.

```{r load env vars and DT function}
#| include: false
# library(DT)
library(dplyr)

token <- Sys.getenv("SUPERHEROES_REDCAP_API")
redcap_uri <- Sys.getenv("REDCAP_URI")
# custom_display <- function(x){datatable(data = x, rownames = FALSE, options = list(
#     dom = 't'
#   ))}
```

```{r display supertibble}
#| include: true
#| echo: true
#| cache: true
library(REDCapTidieR)

superheroes <- read_redcap_tidy(redcap_uri, token)

superheroes |>
  dplyr::glimpse()
```

REDCapTidieR 0.2.0 provides the following new columns:

-   `redcap_form_label`: The instrument's human-readable label
-   `redcap_metadata`: REDCap metadata associated with the instrument
-   `redcap_events`: Events and arms associated with this instrument (for longitudinal projects only)
-   `data_rows`, `data_cols`: Row and column counts of `redcap_data`
-   `data_size`: Size of the `redcap_data` tibble in memory
-   `data_na_pct`: The percentage of missing data in the corresponding `redcap_data`

## REDCapTidier ‚ù§Ô∏è labelled

The [labelled](https://larmarange.github.io/labelled/) package provides an elegant way to decorate the variables of a data frame with descriptive labels. Take a look at Shannon Pileggi's blog post [The case for variable labels in R](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/) to find out why you might want to use them.

REDCapTidieR now provides `make_labelled`, a high-level function that attaches labels to the supertibble and the tibbles it contains:

```{r}
#| cache: true
superheroes_labelled <- superheroes |>
  make_labelled()
```

In the RStudio Viewer, variable labels appear below each variable name. This makes it easy to inspect the contents of the supertibble:

![](images/labelled_supertibble.png){fig-alt="Labelled supertibble"}

While the variable labels in the supertibble are pre-defined, variable labels in the data tibbles (in `redcap_data`) are derived from the REDCap field labels:

![](images/labelled_tibble.png){fig-alt="Labelled tibble"}

## New `read_redcap_tidy` arguments

To enhance and expand the capabilities of `read_redcap_tidy`, we've introduced two new arguments to pass to the API:

-   `forms`
-   `export_survey_fields`

### Retrieve a subset of instruments

You can now download specific `forms` from your database instead of defaulting to downloading the entire dataset. This can be useful for very large databases.

```{r forms example}
#| include: true
#| echo: true
#| cache: true
superheroes_powers <- read_redcap_tidy(redcap_uri, 
                                       token, 
                                       forms = "super_hero_powers")
superheroes_powers |> 
  dplyr::glimpse()
```

The implementation of the `forms` argument in `read_redcap_tidy` addresses an issue in which the REDCap API doesn't return record identifiers unless the first form is among the forms requested.

### Support for surveys

Instruments that are used as surveys generate additional data fields:

-   `[instrument_name]_timestamp`
-   `redcap_survey_identifier`

By default, `read_redcap_tidy` will now return these fields if the instrument is used as a survey. 

```{r survey token}
#| include: false
#| echo: false
survey_token <- Sys.getenv("REDCAPTIDIER_CLASSIC_API")
```

```{r survey example}
#| include: true
#| echo: true
#| cache: true
survey_database <- read_redcap_tidy(redcap_uri,
                                    survey_token,
                                    forms = "survey",
                                    export_survey_fields = TRUE)

survey_database$redcap_data[[1]] |> 
  dplyr::glimpse()
```

Note the inclusion of the `redcap_survey_identifier` and `survey_timestamp` columns.

## Performance improvements and enhancements

-   Increased execution time by >2.5X by optimizing internal functions `check_repeat_and_nonrepeat`, `distill_*_table_long`, and `multi_choice_to_labels`
-   All warnings and error messages are now produced using `cli`
-   Tests and vignettes now use `httptest` to mock and cache REDCap API calls
-   Replaced deprecated `.data` pronoun in tidyselect expressions

## Bug fixes

-   Fixed a bug in which similarly named variables could be duplicated
-   Order of instruments in the supertibble is now the same as the order of instruments in REDCap
-   Fixed an issue in which `extract_*` functions returned `NULL` instead of the expected tibbles
