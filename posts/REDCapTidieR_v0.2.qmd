---
title: REDCapTidieR 0.2.0 ☃️
image: images/REDCapTidieR.png
author: Stephan Kadauke, Ezra Porter, Richard Hanna
description: "REDCapTidieR v0.2.0 release announcement and change descriptions."
categories:
  - REDCap
  - REDCapTidieR
  - R
---

We're thrilled to announce the release of [REDCapTidieR](https://chop-cgtinformatics.github.io/REDCapTidieR/) v0.2.0 on CRAN! REDCapTidieR provides an user-friendly way to import data from a [REDCap](https://www.project-redcap.org/) database into an R environment. You can install the current version from CRAN using `install.packages("REDCapTidieR")`.

## Naming Things is Hard!

Before we get too deep into all of the exciting new features and expanded capabilities of the package, we need to address the rework of REDCapTidieR's function names. As described in [R Packages](https://r-pkgs.org/workflow101.html#naming), naming packages and their components can prove to be the most difficult part of package creation! Trust us when we say we've spent a good length of time volleying every possible convention for both REDCapTidieR and each of its functions before landing on what we've chosen today.

### Function Changes and Handling

Below is quick list of the changes:

- `read_redcap_tidy` is now **`read_redcap`**
- `bind_tables` is now **`bind_tibbles`**
- `extract_table` is now **`extract_tibble`**
- `extract_tables` is now **`extract_tibbles`**

Each of these will be handled with a soft deprecation, leading up to a removal of the original function names in a future version release. You can still use the original names, but you will receive an alert to switch to the new ones.

### Rationale

When it came to chopping off the "tidy" portion of [`read_redcap()`](https://chop-cgtinformatics.github.io/REDCapTidieR/reference/read_redcap.html), we thought about what the best course would be for _teachability_. When working with REDCap and R, you will find users who come to one solely having experience in the other. Some users will find R when looking for tools to analyze their REDCap database, others will be R aficionados thrown into REDCap analysis for the first time. Therefore, succinct names that describe directives are important. [`read_redcap()`](https://chop-cgtinformatics.github.io/REDCapTidieR/reference/read_redcap.html) is evocative, and aligns well with tidyverse styled functions such as those in the [`readr`](https://readr.tidyverse.org/) package.

As we worked on writing up the extensive documentation for REDCapTidieR's [pkgdown site](https://chop-cgtinformatics.github.io/REDCapTidieR/), we wanted to really lean into "branding." The major output of a [`read_redcap()`](https://chop-cgtinformatics.github.io/REDCapTidieR/reference/read_redcap.html) call is a special object containing data and metadata in neatly organized [tidy](https://vita.had.co.nz/papers/tidy-data.pdf) tibbles which we have opted to call the "[**supertibble**](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html#supertibble)." Since this is essential to the DNA of the package, we chose to swap out the generic "table" names with "tibble" to align with the supertibble and serve as a more informative descriptor for what users can expect to get out of these functions.

## Hello metadata!

A key change to REDCapTidieR in v0.2.0 is that the supertibble now includes a lot of additional instrument-level metadata.

```{r load env vars and DT function}
#| include: false
# library(DT)
library(dplyr)

token <- Sys.getenv("SUPERHEROES_REDCAP_API")
redcap_uri <- Sys.getenv("REDCAP_URI")
```

```{r display supertibble}
#| include: true
#| echo: true
#| cache: true
library(REDCapTidieR)

superheroes <- read_redcap(redcap_uri, token)

# superheroes |>
#   dplyr::glimpse()

superheroes |>
  rmarkdown::paged_table()
```

REDCapTidieR 0.2.0 provides the following new columns:

-   `redcap_form_label`: The instrument's human-readable label
-   `redcap_metadata`: REDCap metadata associated with the instrument (derived from `REDCapR::redcap_metadata_read`)
-   `redcap_events`: Events and arms associated with this instrument (for longitudinal projects only)
-   `data_rows`, `data_cols`: Row and column counts of `redcap_data`
-   `data_size`: Size of the `redcap_data` tibble in memory
-   `data_na_pct`: The percentage of missing data in the corresponding `redcap_data`

## REDCapTidieR ❤️ labelled

The [labelled](https://larmarange.github.io/labelled/) package provides an elegant way to decorate the variables of a data frame with descriptive labels. Take a look at Shannon Pileggi's blog post [The case for variable labels in R](https://www.pipinghotdata.com/posts/2022-09-13-the-case-for-variable-labels-in-r/) to find out why you might want to use them.

REDCapTidieR now provides [`make_labelled`](https://chop-cgtinformatics.github.io/REDCapTidieR/reference/make_labelled.html), a high-level function that attaches labels to the supertibble and the tibbles it contains:

```{r}
#| cache: true
superheroes_labelled <- superheroes |>
  make_labelled()
```

In the RStudio Viewer, variable labels appear below each variable name. This makes it easy to inspect the contents of the supertibble:

![](images/labelled_supertibble.png){fig-alt="Labelled supertibble"}

While the variable labels in the supertibble are pre-defined, variable labels in the data tibbles (in `redcap_data`) are derived from the REDCap field labels. This way, field labels seen in REDCap during data entry are repurposed as variable descriptions:

![](images/labelled_tibble.png){fig-alt="Labelled tibble"}

## New [`read_redcap`](https://chop-cgtinformatics.github.io/REDCapTidieR/reference/read_redcap.html) arguments

To enhance and expand the capabilities of [`read_redcap`](https://chop-cgtinformatics.github.io/REDCapTidieR/reference/read_redcap.html), we've introduced two new arguments to pass to the API:

-   `forms`
-   `export_survey_fields`

### Retrieve data from a subset of instruments

You can now download specific `forms` from your database instead of defaulting to downloading the entire dataset. This can be useful for very large databases.

```{r forms example}
#| include: true
#| echo: true
#| cache: true
superheroes_powers <- read_redcap(redcap_uri, 
                                  token, 
                                  forms = "super_hero_powers")
# superheroes_powers |> 
#   dplyr::glimpse()
superheroes_powers |>
  rmarkdown::paged_table()
```

### Support for REDCap surveys

Instruments that are used as surveys generate additional data fields:

-   `[instrument_name]_timestamp`: the time at which the survey was competed
-   `redcap_survey_identifier`: the participant identifier (this will be `NA` if the Participant Identifier feature in REDCap is disabled)

By default, [`read_redcap_tidy`](https://chop-cgtinformatics.github.io/REDCapTidieR/reference/read_redcap_tidy.html) will now return these fields if the instrument is used as a survey. 

```{r survey token}
#| include: false
#| echo: false
survey_token <- Sys.getenv("REDCAPTIDIER_CLASSIC_API")
```

```{r survey example}
#| include: true
#| echo: true
#| cache: true
survey_database <- read_redcap_tidy(redcap_uri,
                                    survey_token,
                                    forms = "survey",
                                    export_survey_fields = TRUE)

survey_database$redcap_data[[1]] |> 
  dplyr::glimpse()
```

Note the inclusion of the `redcap_survey_identifier` and `survey_timestamp` columns.

## New and Expanded Documentation

As mentioned earlier, we've been hard at work writing up extensive documentation to support new users in adopting REDCapTidieR. The [pkgdown site](https://chop-cgtinformatics.github.io/REDCapTidieR/index.html) includes updated pages, new vignettes, and a comprehensive glossary of terms and definitions.

For help with labelling your supertibble, check out the [labelled](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/REDCapTidieR.html#adding-variable-labels-with-the-labelled-package) section of the Get Started page.

Visit the [Glossary](https://chop-cgtinformatics.github.io/REDCapTidieR/articles/glossary.html) for terms and definitions related to REDCap, REDCapTidieR, and everything in between!

## Performance improvements and enhancements

-   Improved execution time by >2.5X by optimizing internal functions `check_repeat_and_nonrepeat`, `distill_*_table_long`, and `multi_choice_to_labels`
-   All warnings and error messages are now produced using `cli`
-   Tests and vignettes now use `httptest` to mock and cache REDCap API calls
-   Replaced deprecated `.data` pronoun in tidyselect expressions

## Bug fixes

-   Fixed a bug in which similarly named variables could be duplicated under some circumstances
-   Order of instruments in the supertibble is now the same as the order of instruments in REDCap
-   Fixed an issue in which `extract_*` functions under some circumstances returned `NULL` instead of the expected tibbles
