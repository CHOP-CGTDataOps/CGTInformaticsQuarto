[
  {
    "objectID": "posts/REDCapTidieR_v1.2.0.html",
    "href": "posts/REDCapTidieR_v1.2.0.html",
    "title": "REDCapTidieR 1.2.0 🎉",
    "section": "",
    "text": "We’re thrilled to announce the release of REDCapTidieR v1.2.0 on CRAN. Since our 1.0.0 release, we’ve updated the core packagage with new features and improvements designed to make your data extraction and tidying processes smoother and more efficient than ever. Let’s dive into what’s new!\nYou can install the package from CRAN with:\ninstall.packages(\"REDCapTidieR\")"
  },
  {
    "objectID": "posts/REDCapTidieR_v1.2.0.html#new-features-to-support-supertibble-post-processing",
    "href": "posts/REDCapTidieR_v1.2.0.html#new-features-to-support-supertibble-post-processing",
    "title": "REDCapTidieR 1.2.0 🎉",
    "section": "🛠️ New Features to Support Supertibble Post-Processing",
    "text": "🛠️ New Features to Support Supertibble Post-Processing\n\n✅ Introducing combine_checkboxes(): Simplify Your Checkbox Data\nCheckbox fields (also known as multi-select) in REDCap are notoriously challenging to work with since they become a separate field for each selection option in the extracted output. Most of the time this is useful and REDCapTidieR automatically handles checkbox fields for you. Let’s refresh and look at a simple example below with a standard output. We’ll use a pared-down version of a supertibble containing a single non-repeating instrument with REDCap data and metadata related to study participant race:\n\nlibrary(REDCapTidieR)\n\nsupertbl\n\n\n  \n\n\n\nNow let’s inspect the data tibble for the demographic_instrument:\n\nsupertbl |&gt; \n  extract_tibble(\"demographic_instrument\")\n\n\n  \n\n\n\nNotice how REDCapTidieR automatically handles the original multi/checkbox variable, race, and splits it into six new fields representing the selection options starting with race___1 and ending with race___6.\nSometimes this is enough, but in this example it may be better to consolidate these fields under a single variable. In the example above, a desired output could be:\n\ntibble::tribble(\n  ~\"study_id\", ~\"race\",\n  1, \"American Indian/Alaska Native\",\n  2, \"Multiple\",\n  3, \"None\"\n)\n\n\n  \n\n\n\nIn this scenario, single selection options persist in the consolidated column, but multiple selections get assigned a new label. Let’s use combine_checkboxes() to handle this:\n\ncombine_checkboxes(\n    supertbl = supertbl,\n    tbl = \"demographic_instrument\",\n    cols = starts_with(\"race\"),\n    multi_value_label = \"Multiple\",\n    values_fill = \"None\"\n) |&gt; \n  extract_tibble(\"demographic_instrument\")\n\n\n  \n\n\n\nThe new variable we modeled above appears at the end of the data tibble! If you are used to the tidyr package, you may notice that some inspiration is taken here from the syntax for pivoting functions. It’s important to note that combine_checkboxes() both accepts and returns a supertibble object, so to view your changes you will need to specifically inspect the data tibble in question."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.2.0.html#mixed-structure-instrument-support",
    "href": "posts/REDCapTidieR_v1.2.0.html#mixed-structure-instrument-support",
    "title": "REDCapTidieR 1.2.0 🎉",
    "section": "Mixed Structure Instrument Support",
    "text": "Mixed Structure Instrument Support\nIn the release of REDCapTidieR v1.1.0, we introduced support for what we call “mixed structure” instruments. These occur when the same instrument is designated as both a repeating and nonrepeating instrument. By default mixed structure instruments will result in a read_redcap() error because of how it clashes with the “tidy” principles the package is built on.\nHowever, sometimes mixed structure instruments are unavoidable. By setting allow_mixed_structure = TRUE in read_redcap(), users can now include mixed structure data tibbles in their supertibble outputs. Nonrepeating variants of mixed structure instruments will be treated as repeating instruments with a single repeating instance.\nFor more information, check out the Mixed Structure Instruments section of the Diving Deeper vignette."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.2.0.html#new-vignette-using-labelled-vectors-with-redcaptidier",
    "href": "posts/REDCapTidieR_v1.2.0.html#new-vignette-using-labelled-vectors-with-redcaptidier",
    "title": "REDCapTidieR 1.2.0 🎉",
    "section": "📚 New Vignette: “Using Labelled Vectors with REDCapTidieR”",
    "text": "📚 New Vignette: “Using Labelled Vectors with REDCapTidieR”\nREDCapTidieR has supported labelled data for a while, and offers several functions to help users apply labels. We’ve expanded on this documentation by adding a comprehensive new vignette titled “Using Labelled Vectors with REDCapTidieR” written to guide you through leveraging labelled vectors to maintain meaningful metadata in your datasets, enhancing both readability and usability."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.2.0.html#new-supertibble-column-information",
    "href": "posts/REDCapTidieR_v1.2.0.html#new-supertibble-column-information",
    "title": "REDCapTidieR 1.2.0 🎉",
    "section": "🔎 New Supertibble Column Information",
    "text": "🔎 New Supertibble Column Information\nThe supertibble output now includes a new metadata column, form_complete_pct, which shows the percentage of a given instrument that has a form status marked as “Complete” (green), giving you a quick overview of your data completeness.\nevent_name has now been added to the columns under the redcap_events metadata column, displaying the event label for each REDCap event in longitudinal projects.\nFor projects with repeating events, a new repeat_type column has been added to display whether the associated instrument under redcap_events is a “repeat_together”, “repeat_separate”, or “nonrepeating” event."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.2.0.html#bug-squashes",
    "href": "posts/REDCapTidieR_v1.2.0.html#bug-squashes",
    "title": "REDCapTidieR 1.2.0 🎉",
    "section": "🐞 Bug Squashes",
    "text": "🐞 Bug Squashes\n\nMixed Structure Data Loss: Resolved an issue where mixed structure databases with dual repeating behaviors were resulting in data loss.\nAccurate Key Specifications for Longitudinal Arms: Fixed a bug where partial keys from REDCap arms could be incorrectly captured due to regex handling.\nSupertibble Label Printing: Addressed a bug that prevented supertibble labels from printing correctly.\nHaven Label Casting: Fixed a bug causing test failures for haven::labelled().\nguess_max Default Argument Update: With the newest release of REDCapR the default argument value for guess_max in read_redcap() has been updated to Inf from .Machine$integer.max."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.2.0.html#until-the-next-update",
    "href": "posts/REDCapTidieR_v1.2.0.html#until-the-next-update",
    "title": "REDCapTidieR 1.2.0 🎉",
    "section": "👋 Until the Next Update",
    "text": "👋 Until the Next Update\nThank you for being a part of the REDCapTidieR user base! Your feedback is always appreciated and drives us to keep making a better package! 🎉"
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html",
    "href": "posts/REDCapTidieR_v1.0.0.html",
    "title": "REDCapTidieR 1.0.0 & JOSS Publication 🎉",
    "section": "",
    "text": "We’re a bit overdue but positively delighted to announce that the v1.0.0 version of REDCapTidieR has been released on CRAN! And we published our paper “REDCapTideR: Extracting complex REDCap databases into tidy tables” in The Journal of Open Source Software (JOSS)!\nYou can install the package from CRAN with:"
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#development-journey",
    "href": "posts/REDCapTidieR_v1.0.0.html#development-journey",
    "title": "REDCapTidieR 1.0.0 & JOSS Publication 🎉",
    "section": "Development Journey",
    "text": "Development Journey\nREDCapTidieR arose from a seemingly simple requirement to compile data from multiple REDCap projects of CAR-T cell clinical trials into a dynamic analysis and visualization tool. We quickly realized, as many before us had, that when you start using longitudinal databases with repeating instruments and events, this can become extremely cumbersome. The block matrix format which squeezes the data from all instruments into one ugly table with varying granularity and lots of empty fields is notoriously difficult to work with. No real solutions existed for handling complex REDCap databases in R that suited our needs.\nTo write the package, we had to make some core decisions up front. Our team embraces tidy data principles, and so we wanted to ensure that our package gels well with tidy rectangular data structures. A major issue with data from complex databases is that that the granularity may not be uniform if some data is variable on a per-record, per-instance, or per-event level. This fundamentally violates the tidy data principle that requires that each table row represents an observation of the same thing. However, within each instrument, the granularity is uniform. We took advantage of this fact and broke down the block matrix into tables, one for each instrument. And along the way we made some automated data transformations that make it easier to work with the data in the R programming environment.\nWe wanted a way to not only break out instruments into tidy tables, but also to make them accessible using an easy-to-use superstructure. So we created the supertibble which provides a handy overview of the instruments of the REDCap project and allows drilling down into the individual data tables.\n\n\n\nSupertibble\n\n\nOnce we had ironed out the data structure, we wrote a set of utility functions to allow users to efficiently work with their exported databases, including labelling their data with the labelled package, exporting their data to Excel with openxlsx2, and getting summary statistics with skimr."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#joss-publication",
    "href": "posts/REDCapTidieR_v1.0.0.html#joss-publication",
    "title": "REDCapTidieR 1.0.0 & JOSS Publication 🎉",
    "section": "JOSS Publication",
    "text": "JOSS Publication\nREDCapTidieR has become a useful tool to many analysts working in REDCap and R. To showcase our commitment to the package and its development we published “REDCapTideR: Extracting complex REDCap databases into tidy tables” in The Journal of Open Source Software. We believe that REDCapTidieR can cut down on thousands of analyst hours spent doing tedious repetitive analytic work, and so we hope that this brief technical paper will extend the reach of our package."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#acknowledgements",
    "href": "posts/REDCapTidieR_v1.0.0.html#acknowledgements",
    "title": "REDCapTidieR 1.0.0 & JOSS Publication 🎉",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nREDCapTidieR is the first open source package our team has made available to the community. To date, we are in awe that we have surpassed over five thousand downloads and see that number grow every day. The success of it wouldn’t be possible without the support and collaboration of the those who helped with its development, opened issues, and contributed to discussions: @camcaan, @JanMarvin, @matthieu-faron, @olivroy, @pwildenhain, @tschuler, @wibeasley."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#next-steps",
    "href": "posts/REDCapTidieR_v1.0.0.html#next-steps",
    "title": "REDCapTidieR 1.0.0 & JOSS Publication 🎉",
    "section": "Next Steps",
    "text": "Next Steps\nWe aren’t done developing REDCapTidieR, and have some ideas in store for the next releases of it including:\n\nCodebook support\nAllowance for instruments that are both repeating and non-repeating\nAdditional functions for extracting REDCap project information\n\nHave a feature you want to see? Please open an issue and let us know how we can continue making this package even better!"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html",
    "href": "posts/REDCapTidieR_v0.2.html",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "",
    "text": "We’re thrilled to announce the release of REDCapTidieR v0.2.0 on CRAN! REDCapTidieR provides a user-friendly way to import data from a REDCap project into the R environment. You can install the current version from CRAN using install.packages(\"REDCapTidieR\")."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#new-names-for-functions",
    "href": "posts/REDCapTidieR_v0.2.html#new-names-for-functions",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "New names for functions",
    "text": "New names for functions\nWe have decided to rename some of the exported functions of our package. Here is what changed:\n\nread_redcap_tidy() is now read_redcap()\nbind_tables() is now bind_tibbles()\nextract_table() is now extract_tibble()\nextract_tables() is now extract_tibbles()\n\nWe have also cleaned up the API to make the function arguments more consistent.\nWe are handling each of these name changes with deprecation functions of the lifecycle package. This means that you can still use the original function names, but you will receive an annoying alert to switch to the new ones each time you try to use them. At some point in the future we may remove the deprecated functions from the package.\n\nWhy on earth would you do that?!\nWe want to design our API so it’s easy to learn and use.\nThe main function of the package is read_redcap(), and its name explains exactly what it does: it reads or imports data from REDCap. The fact that the object that this function returns (i.e. the supertibble) is tidy is a technical detail.\nWe replaced “table” with “tibble” in the data tibble extraction functions because “tibble” is a more precise term than “table.” Also, this way we are being more consistent in our use of REDCapTidieR vocabulary such as “supertibble” and “data tibble”.\nWe also thought about the names in terms of teachability. When you explain how to use the package to someone for the first time, how would you describe the action of each of the functions? For example, how do you read data from REDCap? With read_redcap(). How do you extract a data tibble from the supertibble? With extract_tibble(). Or if you’d rather bind the tibbles to your environment, use bind_tibbles().\n\n\nWhy now?\nREDCapTidieR is still very new and there doesn’t yet exist much code that depends on it (we hope this will change!). The cost of fixing things is low now compared to later on."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#improved-documentation",
    "href": "posts/REDCapTidieR_v0.2.html#improved-documentation",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "Improved Documentation",
    "text": "Improved Documentation\nWe’ve been hard at work writing up extensive documentation to support new users in adopting REDCapTidieR. The Getting Started vignette walks new users through importing data from REDCap into a supertibble, exploring the contents of the supertibble in the RStudio Data Viewer, extracting data tibbles, and adding variable labels.\nThe Diving Deeper vignette explains in detail how REDCapTidieR constructs data tibbles.\nWe also created a comprehensive Glossary of REDCap and REDCapTidieR terms to which we will link frequently."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#hello-metadata",
    "href": "posts/REDCapTidieR_v0.2.html#hello-metadata",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "Hello metadata!",
    "text": "Hello metadata!\nA key change to REDCapTidieR in v0.2.0 is that the supertibble now includes a lot of additional instrument-level metadata.\n\nlibrary(REDCapTidieR)\n\nsuperheroes &lt;- read_redcap(redcap_uri, token)\n\nsuperheroes |&gt;\n  rmarkdown::paged_table()\n\n\n  \n\n\n\nREDCapTidieR 0.2.0 provides the following new columns:\n\nredcap_form_label: a human-readable label for the instrument\nredcap_metadata: The metadata tibble with instrument-level metadata derived from REDCapR::redcap_metadata_read()\nredcap_events: Events and arms associated with this instrument (for longitudinal projects only)\ndata_rows, data_cols: Row and column counts of the data tibble (redcap_data)\ndata_size: Size of the redcap_data tibble in memory\ndata_na_pct: The percentage of missing data in the redcap_data tibble"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#redcaptidier-labelled",
    "href": "posts/REDCapTidieR_v0.2.html#redcaptidier-labelled",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "REDCapTidieR ❤️ labelled",
    "text": "REDCapTidieR ❤️ labelled\nThe labelled R package provides functions to attach a human-readable description (a label) to a variable (a variable label). Variable labels are awesome and we think you will find them useful! Take a look at Shannon Pileggi’s blog post The case for variable labels in R to find out more.\nREDCapTidieR now provides make_labelled(), a function that attaches variable labels to the supertibble and the tibbles it contains:\n\nsuperheroes_labelled &lt;- superheroes |&gt;\n  make_labelled()\n\nIn the RStudio Data Viewer, variable labels appear below each column name. This makes it easy to inspect the contents of the supertibble:\n\nWhile the variable labels in the supertibble are static and pre-defined, variable labels in the data tibbles (redcap_data) are derived from the REDCap field labels. A field label is a piece of text that prompts the REDCap user during data entry. We repurpose field labels to provide a description for the variable:"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#new-arguments-for-read_redcap",
    "href": "posts/REDCapTidieR_v0.2.html#new-arguments-for-read_redcap",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "New arguments for read_redcap()",
    "text": "New arguments for read_redcap()\nWe have introduced two new arguments that can be passed to the read_redcap() function:\n\nforms\nexport_survey_fields\n\n\nRetrieve data from a subset of instruments\nYou can now import data from specific instruments from your project instead of importing the entire dataset. This can be useful for very large projects.\n\n# Only import the super_hero_powers instrument\nsuperheroes_powers &lt;- read_redcap(\n  redcap_uri,\n  token,\n  forms = \"super_hero_powers\"\n)\n\nsuperheroes_powers |&gt;\n  rmarkdown::paged_table()\n\n\n  \n\n\n\n\n\nSupport for REDCap surveys\nREDCap now supports surveys, which are a special type of instrument that can be filled out by someone who isn’t a registered user of the REDCap project. Instruments that are used as surveys generate additional data columns:\n\nredcap_survey_timestamp: the time at which the survey was completed\nredcap_survey_identifier: the participant identifier (this will be NA if the Participant Identifier feature in REDCap is disabled such as for an anonymous survey)\n\nBy default, read_redcap() will now return these columns if the instrument is set up as a survey. Note the redcap_survey_identifier and redcap_survey_timestamp columns below:\n\nsurvey_database &lt;- read_redcap(redcap_uri, survey_token)\n\nsurvey_database |&gt;\n  extract_tibble(\"survey\") |&gt; \n  dplyr::glimpse()\n\nRows: 4\nColumns: 9\n$ record_id                &lt;dbl&gt; 1, 2, 3, 4\n$ survey_yesno             &lt;lgl&gt; TRUE, FALSE, NA, NA\n$ survey_radio             &lt;fct&gt; Choice 1, Choice 2, NA, NA\n$ survey_checkbox___one    &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE\n$ survey_checkbox___two    &lt;lgl&gt; TRUE, TRUE, FALSE, FALSE\n$ survey_checkbox___three  &lt;lgl&gt; TRUE, TRUE, FALSE, FALSE\n$ redcap_survey_identifier &lt;lgl&gt; NA, NA, NA, NA\n$ redcap_survey_timestamp  &lt;dttm&gt; 2022-11-09 10:33:35, NA, NA, NA\n$ form_status_complete     &lt;fct&gt; Complete, Incomplete, Incomplete, Incomplete"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#performance-improvements-and-enhancements",
    "href": "posts/REDCapTidieR_v0.2.html#performance-improvements-and-enhancements",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "Performance improvements and enhancements",
    "text": "Performance improvements and enhancements\n\nImproved execution time by &gt;2.5X by optimizing internal functions\nAdded many helpful warnings and error messages, using cli for pretty printing\nTests and vignettes now use httptest to mock and cache REDCap API calls\nImplemented GitHub Actions lint check\nReplaced deprecated .data pronoun in tidyselect expressions"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#bug-fixes",
    "href": "posts/REDCapTidieR_v0.2.html#bug-fixes",
    "title": "REDCapTidieR 0.2.0 ☃️",
    "section": "Bug fixes",
    "text": "Bug fixes\n\nFixed a bug in which similarly named variables could be duplicated under some circumstances\nOrder of instruments in the supertibble is now the same as the order of instruments in REDCap\nFixed an issue in which extract_* functions under some circumstances returned NULL instead of the expected tibbles"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html",
    "href": "posts/REDCapTidieR_v0.3.html",
    "title": "REDCapTidieR 0.3.0",
    "section": "",
    "text": "We’re thrilled to announce the release of REDCapTidieR v0.3.0 on CRAN! REDCapTidieR provides a user-friendly way to import data from a REDCap project into the R environment.\nYou can install the current version from CRAN with:\ninstall.packages(\"REDCapTidieR\")"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html#major-update-repeating-events-support",
    "href": "posts/REDCapTidieR_v0.3.html#major-update-repeating-events-support",
    "title": "REDCapTidieR 0.3.0",
    "section": "Major Update: Repeating Events Support! 🎉",
    "text": "Major Update: Repeating Events Support! 🎉\nREDCapTidieR introduces support for REDCap “repeating events,” enhancing its versatility in handling diverse data collection scenarios. A repeating event is a feature in REDCap that is often utilized in clinical trials for unscheduled study visits. It allows for the collection of the same data zero, one, or multiple times within a longitudinal project alongside regular scheduled study visit events. This feature enables researchers to efficiently gather data from the same set of instruments during various unscheduled time points or instances, while maintaining an organized data structure. With this update, users of longitudinal databases can now take full advantage of this feature, simplifying data import and analysis in R.\nFor example, consider the physical_exam table which contains data from both regular scheduled and unscheduled visits. These unscheduled visits occur under a single REDCap repeating event. Notice how subject_id 001-123-001 has data for both the “screening_enrollm” and “unscheduled” redcap_events. This demonstrates that you can work with data from both regular scheduled study visits and unscheduled visits in the same data tibble. Also note that the redcap_event_instance values identify the specific unscheduled event that the row is about. This makes it possible to link data in different data tibbles from the same unscheduled event.\n\nlibrary(REDCapTidieR)\n\nread_redcap(redcap_uri, token) |&gt; \n  bind_tibbles()\n\nphysical_exam |&gt; \n  filter(redcap_event == \"screening__enrollm\" | redcap_event == \"unscheduled\") |&gt; \n  rmarkdown::paged_table()\n\n\n  \n\n\n\nTo support repeating events fully we updated the way REDCapTidieR creates identifier columns for a data tibble (see table below). A breaking change in version 0.3.0 is that we removed the redcap_repeat_instance and replaced it with redcap_form_instance for repeated instruments and redcap_event_instance for repeated events. If you explicitly refer to redcap_repeat_instance anywhere in your code you will update this to redcap_form_instance. Please note that REDCap does not allow having repeating instruments inside a repeating event.\n\n\n\n\n\n\n\n\n\n\n\nInstrument Structure\nEvent Structure\nClassic\nLongitudinal, one arm\nLongitudinal, multi-arm\n\n\n\n\nNonrepeating\nNonrepeating\nrecord_id\nrecord_id +\nredcap_event\nrecord_id +\nredcap_event +\nredcap_arm\n\n\nRepeating\nNonrepeating\nrecord_id +\nredcap_form_instance\nrecord_id +\nredcap_form_instance +\nredcap_event\nrecord_id +\nredcap_form_instance +\nredcap_event +\nredcap_arm\n\n\nNonrepeating\nRepeating\nN/A\nrecord_id +\nredcap_event_instance +\nredcap_event\nrecord_id +\nredcap_event_instance +\nredcap_event +\nredcap_arm\n\n\nRepeating\nRepeating\nNot Supported\nNot Supported\nNot Supported"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html#performance-improvements-and-enhancements",
    "href": "posts/REDCapTidieR_v0.3.html#performance-improvements-and-enhancements",
    "title": "REDCapTidieR 0.3.0",
    "section": "Performance Improvements and Enhancements",
    "text": "Performance Improvements and Enhancements\n\nBetter error messages\n\nAdded informative error messages for various REDCap API call-related conditions\nIncluded helpful error messages across all exported functions\nProvided guidance for submitting bug reports when encountering unexpected errors\n\nAdded select_choices_and_calculations column to the metadata tibble"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html#bug-fixes",
    "href": "posts/REDCapTidieR_v0.3.html#bug-fixes",
    "title": "REDCapTidieR 0.3.0",
    "section": "Bug Fixes",
    "text": "Bug Fixes\n\nResolved an issue where the suppress_redcapr_messages argument of read_redcap() did not work\nFixed incorrect parsing of REDCap choices for categorical variables without white space after comma\nImplemented a warning when duplicated choice labels are detected for categorical variables\nAddressed a bug causing empty rows in data tibbles for longitudinal REDCap projects\nFixed an issue where the forms specification in read_redcap() did not work correctly"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html",
    "href": "posts/REDCapTidieR_v0.4.html",
    "title": "REDCapTidieR 0.4.0",
    "section": "",
    "text": "We’re thrilled to announce the release of REDCapTidieR v0.4.0 on CRAN! REDCapTidieR provides a user-friendly way to import data from a REDCap project into the R environment.\nThis blog post will introduce you to three brand new features we’re excited to share.\nYou can install the current version from CRAN with:\ninstall.packages(\"REDCapTidieR\")"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#get-metadata-summary-statistics",
    "href": "posts/REDCapTidieR_v0.4.html#get-metadata-summary-statistics",
    "title": "REDCapTidieR 0.4.0",
    "section": "Get Metadata Summary Statistics 🔎",
    "text": "Get Metadata Summary Statistics 🔎\nThe skimr package is a powerful tool allowing users to quickly get summary statistics of their data. REDCapTidieR now provides a simple function that will automatically apply the appropriate metrics to the supertibble metadata using add_skimr_metadata().\nLet’s take a look at what this does using the internal superheroes_supertbl dataset by first re-acquainting ourselves with a typical supertibble:\n\nlibrary(REDCapTidieR)\nlibrary(dplyr)\n\nsuperheroes_supertbl |&gt; \n  rmarkdown::paged_table()\n\n\n  \n\n\n\nNow, let’s apply our new function and observe some pre-selected metadata variables of interest in the redcap_metadata metadata tibbles:\n\nsuperheroes_supertbl |&gt; \n  add_skimr_metadata() |&gt; \n  select(redcap_metadata) |&gt; \n  tidyr::unnest() |&gt;\n  select(1, 2, 18:33) |&gt; \n  rmarkdown::paged_table()\n\n\n  \n\n\n\nIn addition to the typical metadata columns, we now see a slew of new columns providing metadata statistics! add_skimr_metadata() will automatically detect and apply the appropriate metrics based on the REDCap metadata.\nCurious about what metrics are available? You can find out more using skimr::get_default_skimmer_names() and check out the documentation."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#export-supertibbles-to-xlsx",
    "href": "posts/REDCapTidieR_v0.4.html#export-supertibbles-to-xlsx",
    "title": "REDCapTidieR 0.4.0",
    "section": "Export Supertibbles to XLSX 📝",
    "text": "Export Supertibbles to XLSX 📝\nOne of the most common mediums for data analysis and collaboration is the spreadsheet. With this release, you can now export your supertibble to Excel XLSX using the new write_redcap_xlsx() function. Let’s observe a couple of the output sheets:\n\nsuperheroes_supertbl |&gt; \n  write_redcap_xlsx(\"superheroes.xlsx\")\n\n\n\nBy default, when opening the Excel document you’ll see multiple sheets. The first is the Table of Contents, followed by individual sheets for each instrument’s data, and ending with REDCap Metadata. The Table of Contents provides an overview of data present in the rest of the document while REDCap Metadata provides metadata for all fields from all instruments in one location. Each of these are optional and can be turned off if you only want the data sheets.\n\nLabelled XLSX\nAs introduced in REDCapTidieR v0.2.0, the labelled package can still be used in your XLSX output files. By using the make_labelled() function, you can now integrate your labels into your Excel sheets:\n\nsuperheroes %&gt;%\n   make_labelled() %&gt;%\n   write_redcap_xlsx(\"superheroes-labelled.xlsx\")\n\n Observe how the first row now contains human-readable labels!\n\n\nRecoding Logical Columns\nBy default, write_redcap_xlsx() will recode logical (TRUE/FALSE) columns into more human-friendly terms. This can be adjusted using the recode_logical argument:\n\nsuperheroes %&gt;%\n   write_redcap_xlsx(\"superheroes-labelled.xlsx\", recode_logical = TRUE)\n\nwrite_redcap_xlsx() uses the field label to decide how to recode logical fields:\n\nColumns derived from yesno fields are recoded from TRUE/FALSE to yes/no\nColumns derived from checkbox fields are recoded from TRUE/FALSE to Checked/Unchecked\nColumns derived from truefalse fields are left as is (TRUE/FALSE)\n\nSetting recode_logical to FALSE will preserve all logical fields as (TRUE/FALSE)."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#data-access-group-support",
    "href": "posts/REDCapTidieR_v0.4.html#data-access-group-support",
    "title": "REDCapTidieR 0.4.0",
    "section": "Data Access Group Support 🏢",
    "text": "Data Access Group Support 🏢\nIn REDCap projects, Data Access Groups (DAGs) are used to assign user privileges and control record-level access. DAGs are particularly useful in multi-center studies where data for one participant needs to be kept hidden from other participants in the project.\nWhen using the read_redcap() function, DAGs are automatically exported if detected. You can toggle this option with the export_data_access_groups argument. If declared and/or detected, the redcap_data data tibble will be augmented with an additional data column called redcap_data_access_group, which indicates the assigned DAG for each record.\nLet’s look at a practical example below:\n\nmy_redcap_data &lt;- read_redcap(redcap_uri, dag_token, export_data_access_groups = TRUE)\n\nmy_redcap_data |&gt;\n  extract_tibbles() |&gt;\n  purrr::pluck(1)\n\n# A tibble: 4 × 4\n  record_id redcap_data_access_group non_repeat_form_1_txt form_status_complete\n      &lt;dbl&gt; &lt;chr&gt;                    &lt;lgl&gt;                 &lt;fct&gt;               \n1         1 dag1                     NA                    Complete            \n2         2 dag2                     NA                    Complete            \n3         3 dag3                     NA                    Complete            \n4         4 NA                       NA                    Incomplete  \nHere, you can see the redcap_data_access_group column identifies which DAG the record belongs to as well as one example where a record wasn’t assigned to any at the bottom."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#bug-fixes",
    "href": "posts/REDCapTidieR_v0.4.html#bug-fixes",
    "title": "REDCapTidieR 0.4.0",
    "section": "Bug Fixes",
    "text": "Bug Fixes\n\nFixed a bug where REDCapR API error messages weren’t being returned from REDCapTidieR"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#miscellaneous",
    "href": "posts/REDCapTidieR_v0.4.html#miscellaneous",
    "title": "REDCapTidieR 0.4.0",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nAll deprecated functions have been officially retired and removed from the package"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to CGT Informatics!",
    "section": "",
    "text": "Welcome to the home page for the Children’s Hospital of Philadelphia’s Cell & Gene Therapy Informatics site.\nThis website serves as a repository for publicly available and open-source software, news, and publications."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About CGT Informatics",
    "section": "",
    "text": "Accelerating breakthroughs in Cell and Gene Therapy through Data"
  },
  {
    "objectID": "about.html#mission",
    "href": "about.html#mission",
    "title": "About CGT Informatics",
    "section": "Mission",
    "text": "Mission\nTo build systems that continuously deliver reliable, high-quality, and timely data to Cell and Gene Therapy clinicians and researchers in order to help clinical decision making, improve and automate quality operations, and accelerate Cell and Gene Therapy clinical research."
  },
  {
    "objectID": "about.html#philosophy",
    "href": "about.html#philosophy",
    "title": "About CGT Informatics",
    "section": "Philosophy",
    "text": "Philosophy\n\nDeliver value incrementally, and with the shortest lead time possible\nOwn the entire value stream and take accountability for the outcome\nContinuously learn and improve\nMinimize waste, hardship, and drudgery"
  },
  {
    "objectID": "about.html#members",
    "href": "about.html#members",
    "title": "About CGT Informatics",
    "section": "Members",
    "text": "Members\nCGT Informatics is comprised of the following members:\n\nStephan Kadauke, MD, PhD\nRichard Hanna\nEzra Porter"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "REDCapTidieR 1.2.0 🎉\n\n\n\n\n\n\n\nOpen Source\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v1.2.0 Release\n\n\n\n\n\n\nOct 24, 2024\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\n  \n\n\n\n\nREDCapTidieR 1.0.0 & JOSS Publication 🎉\n\n\n\n\n\n\n\nOpen Source\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v1.0.0 Release and JOSS Publication Announcement\n\n\n\n\n\n\nNov 15, 2023\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\n  \n\n\n\n\nREDCapTidieR 0.4.0\n\n\n\n\n\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v0.4.0 Release Announcement\n\n\n\n\n\n\nJun 7, 2023\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\n  \n\n\n\n\nREDCapTidieR 0.3.0\n\n\n\n\n\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v0.3.0 Release Announcement\n\n\n\n\n\n\nFeb 28, 2023\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\n  \n\n\n\n\nREDCapTidieR 0.2.0 ☃️\n\n\n\n\n\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v0.2.0 release announcement and change descriptions.\n\n\n\n\n\n\nDec 6, 2022\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\nNo matching items"
  }
]