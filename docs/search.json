[
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html",
    "href": "posts/REDCapTidieR_v1.0.0.html",
    "title": "REDCapTidieR 1.0.0 üéâ",
    "section": "",
    "text": "We‚Äôre delighted to announce that REDCapTidieR has earned v1.0.0 status on CRAN! REDCapTidieR provides a user-friendly way to import data from a REDCap project into the R environment.\nYou can install the package from CRAN with:\nIt‚Äôs hard to believe, but REDCapTidieR has been in development for over a year since the CGT Informatics team began working on it in July of 2022. During that time, the package has taken on a number of changes, feature considerations, and optimizations that we believe make this package worthy of being considered stable (üéâ).\nWhile there are no new features to announce, this post will take the opportunity to walk down memory lane and review the road map that got us to where we are today."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#the-early-beginnings",
    "href": "posts/REDCapTidieR_v1.0.0.html#the-early-beginnings",
    "title": "REDCapTidieR 1.0.0 üéâ",
    "section": "The Early Beginnings",
    "text": "The Early Beginnings\nAs with most software solutions, the motivation for creating REDCapTidieR began with frustration. At the Children‚Äôs Hospital of Philadelphia, the CGT Informatics team supports a number of REDCap databases responsible for clinical trial data by providing applications, dashboards, and reports to principal investigators for their respective studies. It became clear after the first few interactions with these longitudinal datasets, that we were quickly repeating mundane operations to tidy up the data outputs of REDCap into usable, reportable formats.\nAs avid R users and subscribers to ‚Äútidy data,‚Äù we quickly realized how unwieldy the standard REDCap block matrix output was and that there was an opportunity to reshape it into a format that aligns with tidy data principles. After assessing the landscape of REDCap tools available for programmatic interaction, we found that there wasn‚Äôt a truly tidy framework in R that could support reformatting the block matrix, and so we got to work at designing our own."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#not-a-bird-not-a-plane-but-a-supertibble",
    "href": "posts/REDCapTidieR_v1.0.0.html#not-a-bird-not-a-plane-but-a-supertibble",
    "title": "REDCapTidieR 1.0.0 üéâ",
    "section": "Not a Bird, Not a Plane, but a Supertibble",
    "text": "Not a Bird, Not a Plane, but a Supertibble\nIn order to accommodate tidy data principles, the new format of the block matrix had to meet the following criteria:\n\nEach variable had to form a column\nEach observation had to form a row\nEach type of observational unit had to form a table\n\nWhile the block matrix can be considered to pass the first two criteria, longitudinal REDCap projects that contain repeating instruments and events result in inconsistent granularity between rows. To reintroduce consistency, we needed to break apart the block matrix into sub-tables, i.e.¬†data tibbles. This would allow us to handle the composite primary keys that make up the identifiers for repeating instruments and events by representing each instrument in an individual table with only the identifier columns necessary to form its key.\nApart from being fun to say, arriving at the ‚Äúsupertibble‚Äù was a natural next step for consolidating all of these data tibbles under one roof. The supertibble is the vehicle for containing a REDCap projects data tibbles, identified by instrument name, metadata tibbles, and various other pieces of information about the instrument. From here, users can easily join together the data they need for their use cases or take advantage of the bind_tibbles() / bind_tibble() functions to place them directly into their programming environment.\n\n\n\nLabelled Supertibble"
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#extensions-and-additional-features",
    "href": "posts/REDCapTidieR_v1.0.0.html#extensions-and-additional-features",
    "title": "REDCapTidieR 1.0.0 üéâ",
    "section": "Extensions and Additional Features",
    "text": "Extensions and Additional Features\nWe put a considerable amount of effort into making sure the user interface of REDCapTidieR is easy to use, easy to navigate, and suits most common needs. You wouldn‚Äôt believe the lengthy discussions had over the name of the package, the names of the core functions, and then the names of the updated core functions when we realized we didn‚Äôt like the ones we chose anymore. Once we solidified the core functionality, we expanded REDCapTidieR‚Äôs capabilities.\nFirst we incorporated variable labels support through the labelled package. With a simple call to make_labelled(), users can effortlessly enhance data readability, allowing for easier interpretation and analysis by adding labels to their data tibbles.\n\n\n\nLabelled Tibble\n\n\nBy tapping into the openxlsx2 package, we opened the sueprtibble up to XLSX export capability. By using write_redcap_xlsx(), users can immediately conver their data tibbles to spreadsheets where each data tibble comprises its own XLSX sheet, expanding the flexibility of data management that REDCapTidieR can provide."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#acknolwedgements",
    "href": "posts/REDCapTidieR_v1.0.0.html#acknolwedgements",
    "title": "REDCapTidieR 1.0.0 üéâ",
    "section": "Acknolwedgements",
    "text": "Acknolwedgements\nREDCapTidieR is the first open source package our team has made available to the community. The success of it wouldn‚Äôt be possible without the support and collaboration of the those who helped with its development, opened issues, or contributed to discussions: @camcaan, @JanMarvin, @matthieu-faron, @olivroy, @pwildenhain, @tschuler, @wibeasley."
  },
  {
    "objectID": "posts/REDCapTidieR_v1.0.0.html#miscellaneous",
    "href": "posts/REDCapTidieR_v1.0.0.html#miscellaneous",
    "title": "REDCapTidieR 1.0.0 üéâ",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nUpdated any functions that relied on openxlsx2 to use the newest stable functions of its 1.0 release\nInternal package cleaning and consolidation\nUpdates to the pkgdown site"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html",
    "href": "posts/REDCapTidieR_v0.2.html",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "",
    "text": "We‚Äôre thrilled to announce the release of REDCapTidieR v0.2.0 on CRAN! REDCapTidieR provides a user-friendly way to import data from a REDCap project into the R environment. You can install the current version from CRAN using install.packages(\"REDCapTidieR\")."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#new-names-for-functions",
    "href": "posts/REDCapTidieR_v0.2.html#new-names-for-functions",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "New names for functions",
    "text": "New names for functions\nWe have decided to rename some of the exported functions of our package. Here is what changed:\n\nread_redcap_tidy() is now read_redcap()\nbind_tables() is now bind_tibbles()\nextract_table() is now extract_tibble()\nextract_tables() is now extract_tibbles()\n\nWe have also cleaned up the API to make the function arguments more consistent.\nWe are handling each of these name changes with deprecation functions of the lifecycle package. This means that you can still use the original function names, but you will receive an annoying alert to switch to the new ones each time you try to use them. At some point in the future we may remove the deprecated functions from the package.\n\nWhy on earth would you do that?!\nWe want to design our API so it‚Äôs easy to learn and use.\nThe main function of the package is read_redcap(), and its name explains exactly what it does: it reads or imports data from REDCap. The fact that the object that this function returns (i.e.¬†the supertibble) is tidy is a technical detail.\nWe replaced ‚Äútable‚Äù with ‚Äútibble‚Äù in the data tibble extraction functions because ‚Äútibble‚Äù is a more precise term than ‚Äútable.‚Äù Also, this way we are being more consistent in our use of REDCapTidieR vocabulary such as ‚Äúsupertibble‚Äù and ‚Äúdata tibble‚Äù.\nWe also thought about the names in terms of teachability. When you explain how to use the package to someone for the first time, how would you describe the action of each of the functions? For example, how do you read data from REDCap? With read_redcap(). How do you extract a data tibble from the supertibble? With extract_tibble(). Or if you‚Äôd rather bind the tibbles to your environment, use bind_tibbles().\n\n\nWhy now?\nREDCapTidieR is still very new and there doesn‚Äôt yet exist much code that depends on it (we hope this will change!). The cost of fixing things is low now compared to later on."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#improved-documentation",
    "href": "posts/REDCapTidieR_v0.2.html#improved-documentation",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "Improved Documentation",
    "text": "Improved Documentation\nWe‚Äôve been hard at work writing up extensive documentation to support new users in adopting REDCapTidieR. The Getting Started vignette walks new users through importing data from REDCap into a supertibble, exploring the contents of the supertibble in the RStudio Data Viewer, extracting data tibbles, and adding variable labels.\nThe Diving Deeper vignette explains in detail how REDCapTidieR constructs data tibbles.\nWe also created a comprehensive Glossary of REDCap and REDCapTidieR terms to which we will link frequently."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#hello-metadata",
    "href": "posts/REDCapTidieR_v0.2.html#hello-metadata",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "Hello metadata!",
    "text": "Hello metadata!\nA key change to REDCapTidieR in v0.2.0 is that the supertibble now includes a lot of additional instrument-level metadata.\n\nlibrary(REDCapTidieR)\n\nsuperheroes <- read_redcap(redcap_uri, token)\n\nsuperheroes |>\n  rmarkdown::paged_table()\n\n\n\n  \n\n\n\nREDCapTidieR 0.2.0 provides the following new columns:\n\nredcap_form_label: a human-readable label for the instrument\nredcap_metadata: The metadata tibble with instrument-level metadata derived from REDCapR::redcap_metadata_read()\nredcap_events: Events and arms associated with this instrument (for longitudinal projects only)\ndata_rows, data_cols: Row and column counts of the data tibble (redcap_data)\ndata_size: Size of the redcap_data tibble in memory\ndata_na_pct: The percentage of missing data in the redcap_data tibble"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#redcaptidier-labelled",
    "href": "posts/REDCapTidieR_v0.2.html#redcaptidier-labelled",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "REDCapTidieR ‚ù§Ô∏è labelled",
    "text": "REDCapTidieR ‚ù§Ô∏è labelled\nThe labelled R package provides functions to attach a human-readable description (a label) to a variable (a variable label). Variable labels are awesome and we think you will find them useful! Take a look at Shannon Pileggi‚Äôs blog post The case for variable labels in R to find out more.\nREDCapTidieR now provides make_labelled(), a function that attaches variable labels to the supertibble and the tibbles it contains:\n\nsuperheroes_labelled <- superheroes |>\n  make_labelled()\n\nIn the RStudio Data Viewer, variable labels appear below each column name. This makes it easy to inspect the contents of the supertibble:\n\nWhile the variable labels in the supertibble are static and pre-defined, variable labels in the data tibbles (redcap_data) are derived from the REDCap field labels. A field label is a piece of text that prompts the REDCap user during data entry. We repurpose field labels to provide a description for the variable:"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#new-arguments-for-read_redcap",
    "href": "posts/REDCapTidieR_v0.2.html#new-arguments-for-read_redcap",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "New arguments for read_redcap()",
    "text": "New arguments for read_redcap()\nWe have introduced two new arguments that can be passed to the read_redcap() function:\n\nforms\nexport_survey_fields\n\n\nRetrieve data from a subset of instruments\nYou can now import data from specific instruments from your project instead of importing the entire dataset. This can be useful for very large projects.\n\n# Only import the super_hero_powers instrument\nsuperheroes_powers <- read_redcap(\n  redcap_uri,\n  token,\n  forms = \"super_hero_powers\"\n)\n\nsuperheroes_powers |>\n  rmarkdown::paged_table()\n\n\n\n  \n\n\n\n\n\nSupport for REDCap surveys\nREDCap now supports surveys, which are a special type of instrument that can be filled out by someone who isn‚Äôt a registered user of the REDCap project. Instruments that are used as surveys generate additional data columns:\n\nredcap_survey_timestamp: the time at which the survey was completed\nredcap_survey_identifier: the participant identifier (this will be NA if the Participant Identifier feature in REDCap is disabled such as for an anonymous survey)\n\nBy default, read_redcap() will now return these columns if the instrument is set up as a survey. Note the redcap_survey_identifier and redcap_survey_timestamp columns below:\n\nsurvey_database <- read_redcap(redcap_uri, survey_token)\n\nsurvey_database |>\n  extract_tibble(\"survey\") |> \n  dplyr::glimpse()\n\nRows: 4\nColumns: 9\n$ record_id                <dbl> 1, 2, 3, 4\n$ survey_yesno             <lgl> TRUE, FALSE, NA, NA\n$ survey_radio             <fct> Choice 1, Choice 2, NA, NA\n$ survey_checkbox___one    <lgl> FALSE, FALSE, FALSE, FALSE\n$ survey_checkbox___two    <lgl> TRUE, TRUE, FALSE, FALSE\n$ survey_checkbox___three  <lgl> TRUE, TRUE, FALSE, FALSE\n$ redcap_survey_identifier <lgl> NA, NA, NA, NA\n$ redcap_survey_timestamp  <dttm> 2022-11-09 10:33:35, NA, NA, NA\n$ form_status_complete     <fct> Complete, Incomplete, Incomplete, Incomplete"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#performance-improvements-and-enhancements",
    "href": "posts/REDCapTidieR_v0.2.html#performance-improvements-and-enhancements",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "Performance improvements and enhancements",
    "text": "Performance improvements and enhancements\n\nImproved execution time by >2.5X by optimizing internal functions\nAdded many helpful warnings and error messages, using cli for pretty printing\nTests and vignettes now use httptest to mock and cache REDCap API calls\nImplemented GitHub Actions lint check\nReplaced deprecated .data pronoun in tidyselect expressions"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.2.html#bug-fixes",
    "href": "posts/REDCapTidieR_v0.2.html#bug-fixes",
    "title": "REDCapTidieR 0.2.0 ‚òÉÔ∏è",
    "section": "Bug fixes",
    "text": "Bug fixes\n\nFixed a bug in which similarly named variables could be duplicated under some circumstances\nOrder of instruments in the supertibble is now the same as the order of instruments in REDCap\nFixed an issue in which extract_* functions under some circumstances returned NULL instead of the expected tibbles"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html",
    "href": "posts/REDCapTidieR_v0.3.html",
    "title": "REDCapTidieR 0.3.0",
    "section": "",
    "text": "We‚Äôre thrilled to announce the release of REDCapTidieR v0.3.0 on CRAN! REDCapTidieR provides a user-friendly way to import data from a REDCap project into the R environment.\nYou can install the current version from CRAN with:"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html#major-update-repeating-events-support",
    "href": "posts/REDCapTidieR_v0.3.html#major-update-repeating-events-support",
    "title": "REDCapTidieR 0.3.0",
    "section": "Major Update: Repeating Events Support! üéâ",
    "text": "Major Update: Repeating Events Support! üéâ\nREDCapTidieR introduces support for REDCap ‚Äúrepeating events,‚Äù enhancing its versatility in handling diverse data collection scenarios. A repeating event is a feature in REDCap that is often utilized in clinical trials for unscheduled study visits. It allows for the collection of the same data zero, one, or multiple times within a longitudinal project alongside regular scheduled study visit events. This feature enables researchers to efficiently gather data from the same set of instruments during various unscheduled time points or instances, while maintaining an organized data structure. With this update, users of longitudinal databases can now take full advantage of this feature, simplifying data import and analysis in R.\nFor example, consider the physical_exam table which contains data from both regular scheduled and unscheduled visits. These unscheduled visits occur under a single REDCap repeating event. Notice how subject_id 001-123-001 has data for both the ‚Äúscreening_enrollm‚Äù and ‚Äúunscheduled‚Äù redcap_events. This demonstrates that you can work with data from both regular scheduled study visits and unscheduled visits in the same data tibble. Also note that the redcap_event_instance values identify the specific unscheduled event that the row is about. This makes it possible to link data in different data tibbles from the same unscheduled event.\n\nlibrary(REDCapTidieR)\n\nread_redcap(redcap_uri, token) |> \n  bind_tibbles()\n\nphysical_exam |> \n  filter(redcap_event == \"screening__enrollm\" | redcap_event == \"unscheduled\") |> \n  rmarkdown::paged_table()\n\n\n\n  \n\n\n\nTo support repeating events fully we updated the way REDCapTidieR creates identifier columns for a data tibble (see table below). A breaking change in version 0.3.0 is that we removed the redcap_repeat_instance and replaced it with redcap_form_instance for repeated instruments and redcap_event_instance for repeated events. If you explicitly refer to redcap_repeat_instance anywhere in your code you will update this to redcap_form_instance. Please note that REDCap does not allow having repeating instruments inside a repeating event.\n\n\n\n\n\n\n\n\n\n\n\nInstrument Structure\nEvent Structure\nClassic\nLongitudinal, one arm\nLongitudinal, multi-arm\n\n\n\n\nNonrepeating\nNonrepeating\nrecord_id\nrecord_id +\nredcap_event\nrecord_id +\nredcap_event +\nredcap_arm\n\n\nRepeating\nNonrepeating\nrecord_id +\nredcap_form_instance\nrecord_id +\nredcap_form_instance +\nredcap_event\nrecord_id +\nredcap_form_instance +\nredcap_event +\nredcap_arm\n\n\nNonrepeating\nRepeating\nN/A\nrecord_id +\nredcap_event_instance +\nredcap_event\nrecord_id +\nredcap_event_instance +\nredcap_event +\nredcap_arm\n\n\nRepeating\nRepeating\nNot Supported\nNot Supported\nNot Supported"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html#performance-improvements-and-enhancements",
    "href": "posts/REDCapTidieR_v0.3.html#performance-improvements-and-enhancements",
    "title": "REDCapTidieR 0.3.0",
    "section": "Performance Improvements and Enhancements",
    "text": "Performance Improvements and Enhancements\n\nBetter error messages\n\nAdded informative error messages for various REDCap API call-related conditions\nIncluded helpful error messages across all exported functions\nProvided guidance for submitting bug reports when encountering unexpected errors\n\nAdded select_choices_and_calculations column to the metadata tibble"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.3.html#bug-fixes",
    "href": "posts/REDCapTidieR_v0.3.html#bug-fixes",
    "title": "REDCapTidieR 0.3.0",
    "section": "Bug Fixes",
    "text": "Bug Fixes\n\nResolved an issue where the suppress_redcapr_messages argument of read_redcap() did not work\nFixed incorrect parsing of REDCap choices for categorical variables without white space after comma\nImplemented a warning when duplicated choice labels are detected for categorical variables\nAddressed a bug causing empty rows in data tibbles for longitudinal REDCap projects\nFixed an issue where the forms specification in read_redcap() did not work correctly"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html",
    "href": "posts/REDCapTidieR_v0.4.html",
    "title": "REDCapTidieR 0.4.0",
    "section": "",
    "text": "We‚Äôre thrilled to announce the release of REDCapTidieR v0.4.0 on CRAN! REDCapTidieR provides a user-friendly way to import data from a REDCap project into the R environment.\nThis blog post will introduce you to three brand new features we‚Äôre excited to share.\nYou can install the current version from CRAN with:"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#get-metadata-summary-statistics",
    "href": "posts/REDCapTidieR_v0.4.html#get-metadata-summary-statistics",
    "title": "REDCapTidieR 0.4.0",
    "section": "Get Metadata Summary Statistics üîé",
    "text": "Get Metadata Summary Statistics üîé\nThe skimr package is a powerful tool allowing users to quickly get summary statistics of their data. REDCapTidieR now provides a simple function that will automatically apply the appropriate metrics to the supertibble metadata using add_skimr_metadata().\nLet‚Äôs take a look at what this does using the internal superheroes_supertbl dataset by first re-acquainting ourselves with a typical supertibble:\n\nlibrary(REDCapTidieR)\nlibrary(dplyr)\n\nsuperheroes_supertbl |> \n  rmarkdown::paged_table()\n\n\n\n  \n\n\n\nNow, let‚Äôs apply our new function and observe some pre-selected metadata variables of interest in the redcap_metadata metadata tibbles:\n\nsuperheroes_supertbl |> \n  add_skimr_metadata() |> \n  select(redcap_metadata) |> \n  tidyr::unnest() |>\n  select(1, 2, 18:33) |> \n  rmarkdown::paged_table()\n\n\n\n  \n\n\n\nIn addition to the typical metadata columns, we now see a slew of new columns providing metadata statistics! add_skimr_metadata() will automatically detect and apply the appropriate metrics based on the REDCap metadata.\nCurious about what metrics are available? You can find out more using skimr::get_default_skimmer_names() and check out the documentation."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#export-supertibbles-to-xlsx",
    "href": "posts/REDCapTidieR_v0.4.html#export-supertibbles-to-xlsx",
    "title": "REDCapTidieR 0.4.0",
    "section": "Export Supertibbles to XLSX üìù",
    "text": "Export Supertibbles to XLSX üìù\nOne of the most common mediums for data analysis and collaboration is the spreadsheet. With this release, you can now export your supertibble to Excel XLSX using the new write_redcap_xlsx() function. Let‚Äôs observe a couple of the output sheets:\n\nsuperheroes_supertbl |> \n  write_redcap_xlsx(\"superheroes.xlsx\")\n\n\n\nBy default, when opening the Excel document you‚Äôll see multiple sheets. The first is the Table of Contents, followed by individual sheets for each instrument‚Äôs data, and ending with REDCap Metadata. The Table of Contents provides an overview of data present in the rest of the document while REDCap Metadata provides metadata for all fields from all instruments in one location. Each of these are optional and can be turned off if you only want the data sheets.\n\nLabelled XLSX\nAs introduced in REDCapTidieR v0.2.0, the labelled package can still be used in your XLSX output files. By using the make_labelled() function, you can now integrate your labels into your Excel sheets:\n\nsuperheroes %>%\n   make_labelled() %>%\n   write_redcap_xlsx(\"superheroes-labelled.xlsx\")\n\n Observe how the first row now contains human-readable labels!\n\n\nRecoding Logical Columns\nBy default, write_redcap_xlsx() will recode logical (TRUE/FALSE) columns into more human-friendly terms. This can be adjusted using the recode_logical argument:\n\nsuperheroes %>%\n   write_redcap_xlsx(\"superheroes-labelled.xlsx\", recode_logical = TRUE)\n\nwrite_redcap_xlsx() uses the field label to decide how to recode logical fields:\n\nColumns derived from yesno fields are recoded from TRUE/FALSE to yes/no\nColumns derived from checkbox fields are recoded from TRUE/FALSE to Checked/Unchecked\nColumns derived from truefalse fields are left as is (TRUE/FALSE)\n\nSetting recode_logical to FALSE will preserve all logical fields as (TRUE/FALSE)."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#data-access-group-support",
    "href": "posts/REDCapTidieR_v0.4.html#data-access-group-support",
    "title": "REDCapTidieR 0.4.0",
    "section": "Data Access Group Support üè¢",
    "text": "Data Access Group Support üè¢\nIn REDCap projects, Data Access Groups (DAGs) are used to assign user privileges and control record-level access. DAGs are particularly useful in multi-center studies where data for one participant needs to be kept hidden from other participants in the project.\nWhen using the read_redcap() function, DAGs are automatically exported if detected. You can toggle this option with the export_data_access_groups argument. If declared and/or detected, the redcap_data data tibble will be augmented with an additional data column called redcap_data_access_group, which indicates the assigned DAG for each record.\nLet‚Äôs look at a practical example below:\n\nmy_redcap_data <- read_redcap(redcap_uri, dag_token, export_data_access_groups = TRUE)\n\nmy_redcap_data |>\n  extract_tibbles() |>\n  purrr::pluck(1)\n\n# A tibble: 4 √ó 4\n  record_id redcap_data_access_group non_repeat_form_1_txt form_status_complete\n      <dbl> <chr>                    <lgl>                 <fct>               \n1         1 dag1                     NA                    Complete            \n2         2 dag2                     NA                    Complete            \n3         3 dag3                     NA                    Complete            \n4         4 NA                       NA                    Incomplete  \nHere, you can see the redcap_data_access_group column identifies which DAG the record belongs to as well as one example where a record wasn‚Äôt assigned to any at the bottom."
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#bug-fixes",
    "href": "posts/REDCapTidieR_v0.4.html#bug-fixes",
    "title": "REDCapTidieR 0.4.0",
    "section": "Bug Fixes",
    "text": "Bug Fixes\n\nFixed a bug where REDCapR API error messages weren‚Äôt being returned from REDCapTidieR"
  },
  {
    "objectID": "posts/REDCapTidieR_v0.4.html#miscellaneous",
    "href": "posts/REDCapTidieR_v0.4.html#miscellaneous",
    "title": "REDCapTidieR 0.4.0",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nAll deprecated functions have been officially retired and removed from the package"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to CGT Informatics!",
    "section": "",
    "text": "Welcome to the home page for the Children‚Äôs Hospital of Philadelphia‚Äôs Cell & Gene Therapy Informatics site.\nThis website serves as a repository for publicly available and open-source software, news, and publications."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About CGT Informatics",
    "section": "",
    "text": "Accelerating breakthroughs in Cell and Gene Therapy through Data"
  },
  {
    "objectID": "about.html#mission",
    "href": "about.html#mission",
    "title": "About CGT Informatics",
    "section": "Mission",
    "text": "Mission\nTo build systems that continuously deliver reliable, high-quality, and timely data to Cell and Gene Therapy clinicians and researchers in order to help clinical decision making, improve and automate quality operations, and accelerate Cell and Gene Therapy clinical research."
  },
  {
    "objectID": "about.html#philosophy",
    "href": "about.html#philosophy",
    "title": "About CGT Informatics",
    "section": "Philosophy",
    "text": "Philosophy\n\nDeliver value incrementally, and with the shortest lead time possible\nOwn the entire value stream and take accountability for the outcome\nContinuously learn and improve\nMinimize waste, hardship, and drudgery"
  },
  {
    "objectID": "about.html#members",
    "href": "about.html#members",
    "title": "About CGT Informatics",
    "section": "Members",
    "text": "Members\nCGT Informatics is comprised of the following members:\n\nStephan Kadauke, MD, PhD\nRichard Hanna\nEzra Porter"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "REDCapTidieR 1.0.0 üéâ\n\n\n\n\n\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v1.0.0 Release Announcement\n\n\n\n\n\n\nNov 15, 2023\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\n  \n\n\n\n\nREDCapTidieR 0.4.0\n\n\n\n\n\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v0.4.0 Release Announcement\n\n\n\n\n\n\nJun 7, 2023\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\n  \n\n\n\n\nREDCapTidieR 0.3.0\n\n\n\n\n\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v0.3.0 Release Announcement\n\n\n\n\n\n\nFeb 28, 2023\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\n  \n\n\n\n\nREDCapTidieR 0.2.0 ‚òÉÔ∏è\n\n\n\n\n\n\n\nREDCap\n\n\nREDCapTidieR\n\n\nR\n\n\n\n\nREDCapTidieR v0.2.0 release announcement and change descriptions.\n\n\n\n\n\n\nDec 6, 2022\n\n\nStephan Kadauke, Ezra Porter, Richard Hanna\n\n\n\n\n\n\nNo matching items"
  }
]